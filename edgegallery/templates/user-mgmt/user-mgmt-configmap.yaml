{{- if .Values.user_mgmt.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: usermgmt-postgres-initdb-configmap
data:
  postgres.sql: |
    CREATE TABLE if not exists tbl_tenant (
      	TENANTID            VARCHAR(100)      PRIMARY KEY NOT NULL,
      	USERNAME            VARCHAR(50)       NOT NULL,
      	PASSWORD            VARCHAR(100)      NOT NULL,
      	COMPANY             VARCHAR(50)       NULL,
      	TELEPHONENUMBER     VARCHAR(20)       NOT NULL,
      	GENDER              VARCHAR(10)       NULL,
      	CONSTRAINT USERNAME UNIQUE (username),
      	CONSTRAINT TELEPHONENUMBER UNIQUE (telephonenumber)

    );

    CREATE TABLE if not exists tbl_tenant_role (
     	TENANTID            VARCHAR(100)      NOT NULL,
      	ROLEID              INTEGER           NOT NULL
    );

    CREATE TABLE if not exists tbl_admin (
      	TENANTID            VARCHAR(100)      PRIMARY KEY NOT NULL,
      	USERNAME            VARCHAR(50)       NOT NULL,
      	PASSWORD            VARCHAR(100)      NOT NULL,
      	COMPANY             VARCHAR(50)       NULL,
      	TELEPHONENUMBER     VARCHAR(20)       NOT NULL,
      	GENDER              VARCHAR(10)       NULL,
      	PERMISSIONS         VARCHAR(500)      NULL
    );

    insert into tbl_admin (tenantid, username, password, company, telephonenumber, gender, permissions)
    values ('f8c3d4fa-6bb0-4a2b-8d6c-17dd8aac9039', 'admin', '-ssmh4d4lfnrt911dtq2m88uk82ej1b3f303mh3lfo4gql5reln8', 'huawei', '15512345678', 'male',
    '[{"platform":"ONAPaaS","role":"ADMIN","pageIds":["0","0.0","0.1","0.2","0.3"]}]');

    CREATE TABLE if not exists tbl_role (
        ID                   INTEGER                PRIMARY KEY NOT NULL,
    	PLATFORM             VARCHAR(50)            NOT NULL,
    	ROLE		         VARCHAR(50)            NOT NULL
    );

    insert into tbl_role (ID, PLATFORM, ROLE) values(1, 'APPSTORE', 'GUEST');
    insert into tbl_role (ID, PLATFORM, ROLE) values(2, 'APPSTORE', 'TENANT');
    insert into tbl_role (ID, PLATFORM, ROLE) values(3, 'APPSTORE', 'ADMIN');

    insert into tbl_role (ID, PLATFORM, ROLE) values(4, 'DEVELOPER', 'GUEST');
    insert into tbl_role (ID, PLATFORM, ROLE) values(5, 'DEVELOPER', 'TENANT');
    insert into tbl_role (ID, PLATFORM, ROLE) values(6, 'DEVELOPER', 'ADMIN');

    insert into tbl_role (ID, PLATFORM, ROLE) values(7, 'MECM', 'GUEST');
    insert into tbl_role (ID, PLATFORM, ROLE) values(8, 'MECM', 'TENANT');
    insert into tbl_role (ID, PLATFORM, ROLE) values(9, 'MECM', 'ADMIN');

    CREATE TABLE IF NOT EXISTS oauth_client_details(
        client_id VARCHAR(256) PRIMARY KEY,
        resource_ids VARCHAR(256),
        client_secret VARCHAR(256),
        scope VARCHAR(256),
        authorized_grant_types VARCHAR(256),
        web_server_redirect_uri VARCHAR(256),
        authorities VARCHAR(256),
        access_token_validity INTEGER,
        refresh_token_validity INTEGER,
        additional_information VARCHAR(4096),
        autoapprove VARCHAR(256)
    );

    insert into oauth_client_details (client_id, client_secret, scope, authorized_grant_types, web_server_redirect_uri, additional_information, autoapprove)
    {{- if eq .Values.expose.type "ingress" }}
    {{- if .Values.expose.ingress.tls.enabled }}
    values ('{{ .Values.appstore.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token', 'https://{{ .Values.expose.ingress.hosts.appstore }}/login', '{"logout_url":"https://{{ .Values.expose.ingress.hosts.appstore }}/auth/logout"}', 'true');
    {{- else  }}
    values ('{{ .Values.appstore.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token', 'http://{{ .Values.expose.ingress.hosts.appstore }}/login', '{"logout_url":"http://{{ .Values.expose.ingress.hosts.appstore }}/auth/logout"}', 'true');
    {{- end  }}
    {{- end  }}
    {{- if eq .Values.expose.type "nodePort" }}
    values ('{{ .Values.appstore.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token', 'http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.appstore_fe.nodePort }}/login', '{"logout_url":"http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.appstore_fe.nodePort }}/auth/logout"}', 'true');
    {{- end  }}

    insert into oauth_client_details (client_id, client_secret, scope, authorized_grant_types, web_server_redirect_uri, additional_information, autoapprove)
    {{- if eq .Values.expose.type "ingress" }}
    {{- if .Values.expose.ingress.tls.enabled }}
    values ('{{ .Values.developer.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token','https://{{ .Values.expose.ingress.hosts.developer }}/login', '{"logout_url":"https://{{ .Values.expose.ingress.hosts.developer }}/auth/logout"}', 'true');
    {{- else  }}
    values ('{{ .Values.developer.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token','http://{{ .Values.expose.ingress.hosts.developer }}/login', '{"logout_url":"http://{{ .Values.expose.ingress.hosts.developer }}/auth/logout"}', 'true');
    {{- end  }}
    {{- end  }}
    {{- if eq .Values.expose.type "nodePort" }}
    values ('{{ .Values.developer.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token','http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.developer_fe.nodePort }}/login', '{"logout_url":"http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.developer_fe.nodePort }}/auth/logout"}', 'true');
    {{- end  }}

    insert into oauth_client_details (client_id, client_secret, scope, authorized_grant_types, web_server_redirect_uri, additional_information, autoapprove)
    {{- if eq .Values.expose.type "ingress" }}
    values ('{{ .Values.mecm.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token', 'http://{{ .Values.expose.ingress.hosts.mecm }}/login', '{"logout_url":"http://{{ .Values.expose.ingress.hosts.mecm }}/auth/logout"}', 'true');
    {{- end  }}
    {{- if eq .Values.expose.type "nodePort" }}
    values ('{{ .Values.mecm.oauth2.client_id }}', '47a37d56ff1e1134d5c65d8e3a29ebfe3c1ca9c543de48b3f6ab0101c3c4621034425299e872e1ae', 'all', 'authorization_code,refresh_token', 'http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.mecm_fe.nodePort }}/login', '{"logout_url":"http://{{ .Values.expose.nodePort.ip }}:{{ .Values.expose.nodePort.mecm_fe.nodePort }}/auth/logout"}', 'true');
    {{- end  }}
{{- end }}