{{- if .Values.user_mgmt.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-mgmt-postgres
spec:
  serviceName: user-mgmt-postgres-svc
  selector:
    matchLabels:
      app: user-mgmt-postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: user-mgmt-postgres
    spec:
      containers:
        - name: user-mgmt-postgres
          image: postgres:9.6.15
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          env:
            - name: SECRET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: user-mgmt-postgres-secret
                  key: POSTGRES_USER
            - name: SECRET_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: user-mgmt-postgres-secret
                  key: POSTGRES_PASSWORD
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - mountPath: /var/lib/postgresql/data
              name: usermgmt-postgres-pvc
            {{- end }}
            - mountPath: /docker-entrypoint-initdb.d
              name: usermgmt-postgres-initdb
      volumes:
        - name: usermgmt-postgres-initdb
          configMap:
            name: usermgmt-postgres-initdb-configmap
  {{- if and .Values.persistence.enabled (eq .Values.persistence.type "nfs") }}
  volumeClaimTemplates:
    - metadata:
        name: usermgmt-postgres-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "nfs-client"
        resources:
          requests:
            storage: 5Gi
  {{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: user-mgmt-redis
spec:
  serviceName: user-mgmt-redis-svc
  selector:
    matchLabels:
      app: user-mgmt-redis
  replicas: 1
  template:
    metadata:
      labels:
        app: user-mgmt-redis
    spec:
      containers:
        - name: user-mgmt-redis
          image: redis:alpine
          imagePullPolicy: Always
          ports:
            - containerPort: 6379
          {{- if .Values.persistence.enabled }}
          volumeMounts:
            - mountPath: /var/lib/redis/data
              name: usermgmt-redis-pvc
          {{- end }}
  {{- if and .Values.persistence.enabled (eq .Values.persistence.type "nfs") }}
  volumeClaimTemplates:
    - metadata:
        name: usermgmt-redis-pvc
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: "nfs-client"
        resources:
          requests:
            storage: 1Gi
  {{- end }}
{{- end }}