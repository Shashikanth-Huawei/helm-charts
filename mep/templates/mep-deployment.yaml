# kong deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: apigw-kong
  name: apigw-kong
  namespace: mep
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apigw-kong
  template:
    metadata:
      labels:
        app: apigw-kong
    spec:
      initContainers:
        - name: check-db-ready
          image: {{ .Values.images.postgres.repository }}:{{ .Values.images.postgres.tag }}
          command: ['sh', '-c', 'until pg_isready -h postgres-db -p 5432; do echo waiting for database; sleep 2; done;']
      containers:
        - name: kong-proxy
          image: {{ .Values.images.kong.repository }}:{{ .Values.images.kong.tag }}
          imagePullPolicy: {{ .Values.images.kong.pullPolicy }}
          env:
            - name: KONG_DATABASE
              value: postgres
            - name: KONG_NGINX_WORKER_PROCESSES
              value: "1"
            - name: KONG_ADMIN_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_ADMIN_ERROR_LOG
              value: /dev/stderr
            - name: KONG_ADMIN_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_ADMIN_ERROR_LOG
              value: /dev/stderr
            - name: KONG_ADMIN_LISTEN
              value: 127.0.0.1:8444 ssl
            - name: KONG_PROXY_LISTEN
              value: 0.0.0.0:8000, 0.0.0.0:8443 ssl http2
            - name: KONG_ADMIN_LISTEN
              value: 0.0.0.0:8001
            - name: KONG_PG_DATABASE
              value: {{ .Values.postgres.dbname }}
            - name: KONG_PG_HOST
              value: mep-postgres-svc
            - name: KONG_PG_USER
              valueFrom:
                secretKeyRef:
                  name: mep-secret
                  key: postgresUsername
            - name: KONG_PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mep-secret
                  key: postgresPassword
            - name: KONG_PROXY_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_PROXY_ERROR_LOG
              value: /dev/stderr
          ports:
            - containerPort: 8000
              name: proxy
              protocol: TCP
            - containerPort: 8443
              name: proxy-ssl
              protocol: TCP
            - containerPort: 8001
              name: admin-api
              protocol: TCP
            - containerPort: 8444
              name: admin-api-ssl
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mep
  namespace: mep
  labels:
    app: mep
spec:
  selector:
    matchLabels:
      app: mep
  replicas: 1
  template:
    metadata:
      labels:
        app: mep
    spec:
      containers:
        - image: {{ .Values.images.mep.repository }}:{{ .Values.images.mep.tag }}
          imagePullPolicy: {{ .Values.images.mep.pullPolicy }}
          name: mep-pod
          ports:
            - containerPort: 8088
            - containerPort: 8443
          env:
            - name: SSL_ROOT
              value: /etc/mep/ssl
            - name: MEP_SSL_MODE
              value: {{ if .Values.ssl.enabled }}"1"{{ else }}"0"{{ end }}
          volumeMounts:
            - name: mepssl
              mountPath: /etc/mep/ssl
              readOnly: true
      volumes:
        - name: mepssl
          secret:
            secretName: {{ .Values.ssl.secretName }}
            items:
              - key: trust.cer
                path: trust.cer
                mode: 0644
              - key: server.cer
                path: server.cer
                mode: 0644
              - key: server_key.pem
                path: server_key.pem
                mode: 0644
              - key: cert_pwd
                path: cert_pwd
                mode: 0644
